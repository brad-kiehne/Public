#Log Function
Function Log-Message()
{
 param
    (
    [Parameter(Mandatory=$true)] [string] $Message
    )
 
    Try {
        #Get the current date
        $LogDate = (Get-Date).tostring("ddMMyyyy")
 
        #Get the Location of the script

      $LogDir = "C:\Moetech\Logs\"

        #Frame Log File with Current Directory and date
        $LogFile = $LogDir+ "\" + $LogDate + ".txt"
 
        #Add Content to the Log File
        $TimeStamp = (Get-Date).toString("dd/MM/yyyy HH:mm:ss:fff tt")
        $Line = "$TimeStamp - $Message"
        Add-content -Path $Logfile -Value $Line
 
        Write-host "Message: '$Message' Has been Logged to File: $LogFile"
    }
    Catch {
        Write-host -f Red "Error:" $_.Exception.Message 
    }
}
#PreFlight Checks- These are used if there is a timeout on the CWA server
$LTRunByUserEmail = "helpdesk@adits.com"
$LTUN = "Help.Desk"
$LTRandomPassword = "qGFQeJv!qHCG4N"
$LTDeviceID  = "DeviceID-ERR"
$LTTechBodyWelcome = "@TechBodyWelcome@"
$LTLogDate = "C:\Moetech\Logs\$LogDate.txt"
$LTBitLockerRecoveryExport = "@BitLockerRecoveryExport@"
$LTTechBodyGoodbye = "@TechBodyGoodbye@"
$LogDate = (Get-Date).tostring("ddMMyyyy")


Set-ExecutionPolicy -ExecutionPolicy Bypass -Force
#Check for Onboarding File - Loads variables if this is not a dry run
$OBFile = 'C:\Onboarding.ps1'

#If the file does not exist, run with loaded variables
if (-not(Test-Path -Path $OBFile -PathType Leaf)) {
     try {         
      $null = Write-Host "The file [$OBFile] has not been found running independently of CWA."
      Invoke-WebRequest -Uri https://raw.githubusercontent.com/brad-kiehne/Public/main/MOE_Log_Viewer -OutFile "C:\Log_Viewer.hta"  
      $findString = '@LogDate@.txt'
      $Chungus = "Whydoieven"
      $LogDir2 = "C:\Moetech\Logs\"
      $LogDate = (Get-Date).tostring("ddMMyyyy")
      $LTLogDate1 =  $LogDir2 + $LogDate + ".txt"
      (Get-Content "C:\Log_Viewer.hta") | foreach {$_.replace($findString,$LTLogDate1)} | 
         Set-Content "C:\Log_Viewer2.hta"
      Start-Process explorer.exe -ArgumentList C:\Log_Viewer2.hta
}     
catch {         
      throw $_.Exception.Message     
} 
}
# If the file already exists, CWA is linked and loads a variable file.
else {
      Write-Host "[$OBFile] exists. Loading for variables"
      . .\$OBFile
      Write-Host "$LTUN"
  }

#GitHub URLs
#$MOE_LV = "https://raw.githubusercontent.com/brad-kiehne/Public/main/MOE_Log_Viewer"
$PowerPlan = "https://raw.githubusercontent.com/brad-kiehne/Public/main/HighPerformance_Power"
$Apps = "https://raw.githubusercontent.com/brad-kiehne/Public/main/Remove_Win10_Apps"
$Unpin = "https://raw.githubusercontent.com/brad-kiehne/Public/main/Unpin_Win10_StartMenu"
$Defaults = "https://raw.githubusercontent.com/brad-kiehne/Public/main/MoeBuilderV8.2BASE"
$Wallpaper = "https://raw.githubusercontent.com/brad-kiehne/Public/main/Wallpaper"
$Win11Defaults = "https://raw.githubusercontent.com/brad-kiehne/Public/main/Win11_Startmenu"
$OEMFix = "https://raw.githubusercontent.com/brad-kiehne/Public/main/Dell_Optimizer_Uninstall"

#Build Folder Structure
Log-Message "Building Moetech Folder Structure"
$rootpath = "C:\Moetech"
If(!(test-path -PathType container $rootpath))
{
      New-Item -ItemType Directory -Path $rootpath
}

$Logpath = "C:\Moetech\Logs"
If(!(test-path -PathType container $Logpath))
{
      New-Item -ItemType Directory -Path $Logpath
}

$Softwarepath = "C:\Moetech\Software"
If(!(test-path -PathType container $Softwarepath))
{
      New-Item -ItemType Directory -Path $Softwarepath
}

$ODTpath = "C:\Moetech\ODT"
If(!(test-path -PathType container $ODTpath))
{
      New-Item -ItemType Directory -Path $ODTpath
}

$3PPpath = "C:\Moetech\Software\3PP"
If(!(test-path -PathType container $3PPpath))
{
      New-Item -ItemType Directory -Path $3PPpath
}

Log-Message "Loading MOE Log Viewer"
#Invoke-WebRequest -Uri "$MOE_LV" -OutFile "$Logpath\MOE_Log_Viewer.hta"

#Step one - Deploy High-Performance Power Plan
Log-Message "Loading Step One: High-Performance Power Plan Configuration"
$ScriptFromGitHub = Invoke-WebRequest $PowerPlan -UseBasicParsing
Invoke-Expression $($ScriptFromGitHub.Content)

#Step two - Nix Windows 10 Bloatware
Log-Message "Loading Step Two: Windows 10 Third Party App Removal"
$ScriptFromGitHub = Invoke-WebRequest $Apps -UseBasicParsing
Invoke-Expression $($ScriptFromGitHub.Content)

#Step Three - Unpin Windows 10 Menus
Log-Message "Loading Step Three: Unpinning Windows 10/11 Start Menu Items"
$ScriptFromGitHub = Invoke-WebRequest $Unpin -UseBasicParsing
Invoke-Expression $($ScriptFromGitHub.Content)

#Step Four - Nix Windows 11 Bloatware (Includes installation for Office365, Chrome, Teams, Adobe, VLC and PMPC)
Log-Message "Loading Step Four Removing Windows 11 Third-Party Apps and Updating Office365, Chrome, Teams, Adobe, VLC and PMPC"
$ScriptFromGitHub = Invoke-WebRequest $Defaults -UseBasicParsing
Invoke-Expression $($ScriptFromGitHub.Content)

#Step Five - Deploy ADITS External Wallpaper
Log-Message "Loading Step Five: Pushing ADITS External Desktop Background"
$ScriptFromGitHub = Invoke-WebRequest $Wallpaper -UseBasicParsing
Invoke-Expression $($ScriptFromGitHub.Content)

#Step Six - Window 11 Specific Defaults
Log-Message "Loading Step Six: Pushing Windows 11 Specific Defaults"
$ScriptFromGitHub = Invoke-WebRequest $Win11Defaults -UseBasicParsing
Invoke-Expression $($ScriptFromGitHub.Content)

#Step Seven - OEM Specific Fix
Log-Message "Loading Step Seven: DELL OEM Fixes applied"
$ScriptFromGitHub = Invoke-WebRequest $OEMFix -UseBasicParsing
Invoke-Expression $($ScriptFromGitHub.Content)
Log-Message "Moetech Password set"
Set-LocalUser -Name Moetech -Password (ConvertTo-SecureString $LTRandomPassword -AsPlainText -Force)
Add-LocalGroupMember -Group Administrators -Member Moetech
Rename-Computer -NewName $LTDeviceID
$BitlockerVolumers = Get-BitLockerVolume
$BitlockerVolumers |
ForEach-Object {
$MountPoint = $_.MountPoint
$RecoveryKey = [string]($_.KeyProtector).RecoveryPassword
if ($RecoveryKey.Length -gt 5) {
Log-Message ("The drive $MountPoint has a BitLocker recovery key $RecoveryKey.")

}
}

#Unload - Close Session, handback to CWA
Log-Message "Loader Completed all steps, Handing back to CWA Script Engine"
Log-Message " - - - - - - - - "
